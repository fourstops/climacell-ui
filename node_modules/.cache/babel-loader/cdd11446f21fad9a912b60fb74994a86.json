{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n/**\n * A hook that fetches the given <url>.\n */\n\nfunction useFetch({\n  url\n}) {\n  _s();\n\n  const [response, setResponse] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    fetch(url).then(res => {\n      if (res.status !== 200) {\n        throw new Error(res.statusText);\n      }\n\n      return res.json();\n    }).then(res => {\n      setResponse(res);\n      setLoading(false);\n    }).catch(() => {\n      setHasError(true);\n      setLoading(false);\n    });\n  }, [url]);\n  return [response, loading, hasError];\n}\n\n_s(useFetch, \"xC2M7xsR3nSvMF9lTjNYm43NIt8=\");\n\nexport { useFetch };","map":{"version":3,"sources":["/home/pi/climacell/src/hooks/use-fetch.hook.js"],"names":["useState","useEffect","useFetch","url","response","setResponse","loading","setLoading","hasError","setHasError","fetch","then","res","status","Error","statusText","json","catch"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;;AACA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA2B;AAAA;;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,IAAAA,KAAK,CAACP,GAAD,CAAL,CACKQ,IADL,CACWC,GAAD,IAAS;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,cAAM,IAAIC,KAAJ,CAAUF,GAAG,CAACG,UAAd,CAAN;AACH;;AACD,aAAOH,GAAG,CAACI,IAAJ,EAAP;AACH,KANL,EAOKL,IAPL,CAOWC,GAAD,IAAS;AACXP,MAAAA,WAAW,CAACO,GAAD,CAAX;AACAL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAVL,EAWKU,KAXL,CAWW,MAAM;AACTR,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAdL;AAeH,GAjBQ,EAiBN,CAACJ,GAAD,CAjBM,CAAT;AAmBA,SAAO,CAACC,QAAD,EAAWE,OAAX,EAAoBE,QAApB,CAAP;AACH;;GAzBQN,Q;;AA2BT,SAASA,QAAT","sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * A hook that fetches the given <url>.\n */\nfunction useFetch({ url }) {\n    const [response, setResponse] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [hasError, setHasError] = useState(false);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(url)\n            .then((res) => {\n                if (res.status !== 200) {\n                    throw new Error(res.statusText);\n                }\n                return res.json();\n            })\n            .then((res) => {\n                setResponse(res);\n                setLoading(false);\n            })\n            .catch(() => {\n                setHasError(true);\n                setLoading(false);\n            })\n    }, [url]);\n\n    return [response, loading, hasError]\n}\n\nexport { useFetch };\n"]},"metadata":{},"sourceType":"module"}