{"ast":null,"code":"/**\n * Creates a full URL from a base URL and query params.\n * @param url\n * @param query\n * @returns {string}\n */\nconst createUrl = ({\n  url,\n  query = {}\n}) => {\n  const urlBuilder = new URL(url);\n  Object.entries(query).forEach(([key, value]) => {\n    if (value == null) {\n      return;\n    }\n\n    if (Array.isArray(value)) {\n      value.forEach(val => urlBuilder.searchParams.append(key, val));\n      return;\n    }\n\n    urlBuilder.searchParams.append(key, value);\n  });\n  return urlBuilder.toString();\n};\n/**\n * Returns a date <hours> after the given <date>.\n * @param date\n * @param hours\n */\n\n\nconst addHours = ({\n  date,\n  hours = 0\n}) => {\n  const newDate = new Date(date.valueOf());\n  newDate.setTime(date.getTime() + hours * 60 * 60 * 1000);\n  return newDate;\n};\n/**\n * Formats time in a way we want to present it.\n * Examples: 7AM, 12PM\n * @param time\n * @returns {string}\n */\n\n\nconst formatTime = time => {\n  const hours = new Date(time).getHours();\n  const suffix = hours >= 12 ? 'PM' : 'AM';\n  let display = hours % 12;\n\n  if (display === 0) {\n    display = 12;\n  }\n\n  return `${display}${suffix}`;\n};\n/**\n * Converts weather code value to human display string.\n * Example: freezing_rain to Freezing Rain\n * @param str\n * @returns {string}\n */\n\n\nconst prettyPrintWeatherCode = str => {\n  return str.replace('_', ' ').replace(/\\b[a-zA-Z]/g, first => first.toUpperCase());\n};\n\nexport { createUrl, addHours, formatTime, prettyPrintWeatherCode };","map":{"version":3,"sources":["/home/pi/climacell/src/utilities.js"],"names":["createUrl","url","query","urlBuilder","URL","Object","entries","forEach","key","value","Array","isArray","val","searchParams","append","toString","addHours","date","hours","newDate","Date","valueOf","setTime","getTime","formatTime","time","getHours","suffix","display","prettyPrintWeatherCode","str","replace","first","toUpperCase"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,KAAK,GAAG;AAAf,CAAD,KAAyB;AACvC,QAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAAnB;AAEAI,EAAAA,MAAM,CAACC,OAAP,CAAeJ,KAAf,EAAsBK,OAAtB,CAA8B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC5C,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf;AACH;;AAED,QAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtBA,MAAAA,KAAK,CAACF,OAAN,CAAcK,GAAG,IAAIT,UAAU,CAACU,YAAX,CAAwBC,MAAxB,CAA+BN,GAA/B,EAAoCI,GAApC,CAArB;AACA;AACH;;AAEDT,IAAAA,UAAU,CAACU,YAAX,CAAwBC,MAAxB,CAA+BN,GAA/B,EAAoCC,KAApC;AACH,GAXD;AAaA,SAAON,UAAU,CAACY,QAAX,EAAP;AACH,CAjBD;AAmBA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAK,GAAG;AAAhB,CAAD,KAAyB;AACtC,QAAMC,OAAO,GAAG,IAAIC,IAAJ,CAASH,IAAI,CAACI,OAAL,EAAT,CAAhB;AACAF,EAAAA,OAAO,CAACG,OAAR,CAAgBL,IAAI,CAACM,OAAL,KAAiBL,KAAK,GAAG,EAAR,GAAa,EAAb,GAAkB,IAAnD;AACA,SAAOC,OAAP;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,UAAU,GAAIC,IAAD,IAAU;AACzB,QAAMP,KAAK,GAAG,IAAIE,IAAJ,CAASK,IAAT,EAAeC,QAAf,EAAd;AACA,QAAMC,MAAM,GAAGT,KAAK,IAAI,EAAT,GAAc,IAAd,GAAqB,IAApC;AACA,MAAIU,OAAO,GAAGV,KAAK,GAAG,EAAtB;;AACA,MAAIU,OAAO,KAAK,CAAhB,EAAmB;AACfA,IAAAA,OAAO,GAAG,EAAV;AACH;;AACD,SAAQ,GAAEA,OAAQ,GAAED,MAAO,EAA3B;AACH,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,sBAAsB,GAAIC,GAAD,IAAQ;AACnC,SAAOA,GAAG,CAACC,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,EAAsBA,OAAtB,CAA8B,aAA9B,EAA8CC,KAAD,IAAUA,KAAK,CAACC,WAAN,EAAvD,CAAP;AACH,CAFD;;AAIA,SAASjC,SAAT,EAAoBgB,QAApB,EAA8BQ,UAA9B,EAA0CK,sBAA1C","sourcesContent":["/**\n * Creates a full URL from a base URL and query params.\n * @param url\n * @param query\n * @returns {string}\n */\nconst createUrl = ({ url, query = {} }) => {\n    const urlBuilder = new URL(url);\n\n    Object.entries(query).forEach(([key, value]) => {\n        if (value == null) {\n            return;\n        }\n\n        if (Array.isArray(value)) {\n            value.forEach(val => urlBuilder.searchParams.append(key, val));\n            return;\n        }\n\n        urlBuilder.searchParams.append(key, value);\n    });\n\n    return urlBuilder.toString();\n};\n\n/**\n * Returns a date <hours> after the given <date>.\n * @param date\n * @param hours\n */\nconst addHours = ({ date, hours = 0 }) => {\n    const newDate = new Date(date.valueOf());\n    newDate.setTime(date.getTime() + hours * 60 * 60 * 1000);\n    return newDate;\n};\n\n/**\n * Formats time in a way we want to present it.\n * Examples: 7AM, 12PM\n * @param time\n * @returns {string}\n */\nconst formatTime = (time) => {\n    const hours = new Date(time).getHours();\n    const suffix = hours >= 12 ? 'PM' : 'AM';\n    let display = hours % 12;\n    if (display === 0) {\n        display = 12;\n    }\n    return `${display}${suffix}`;\n};\n\n/**\n * Converts weather code value to human display string.\n * Example: freezing_rain to Freezing Rain\n * @param str\n * @returns {string}\n */\nconst prettyPrintWeatherCode = (str) =>{\n    return str.replace('_', ' ').replace(/\\b[a-zA-Z]/g, (first) =>first.toUpperCase());\n};\n\nexport { createUrl, addHours, formatTime, prettyPrintWeatherCode };\n"]},"metadata":{},"sourceType":"module"}